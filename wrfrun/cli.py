import argparse
import sys
from os import makedirs
from os.path import abspath, dirname, exists
from shutil import copyfile

import tomli
import tomli_w

from .core import WRFRUNConfig
from .res import CONFIG_MAIN_TOML_TEMPLATE, CONFIG_WRF_TOML_TEMPLATE
from .utils import logger

MODEL_MAP = {
    "wrf": CONFIG_WRF_TOML_TEMPLATE
}


def _entry_init(args: argparse.Namespace):
    """
    Initialize a wrfrun project.

    :param args: Arguments namespace.
    :type args: argparse.Namespace
    """
    args = vars(args)

    project_name = args["name"]
    models = args["models"]

    if exists(project_name):
        logger.error(f"{project_name} already exists.")
        exit(1)

    makedirs(f"{project_name}/configs")
    makedirs(f"{project_name}/data")

    copyfile(WRFRUNConfig.parse_resource_uri(CONFIG_MAIN_TOML_TEMPLATE), f"{project_name}/config.toml")

    if models is not None:
        for _model in models:
            src_path = WRFRUNConfig.parse_resource_uri(MODEL_MAP[_model])
            copyfile(src_path, f"{project_name}/configs/{_model}.toml")

    logger.info(f"Created project {project_name}.")
    logger.info(f"Use command `wrfrun add MODEL_NAME` to add a new model to project.")


def _entry_model(args: argparse.Namespace):
    """
    Manage models used by wrfrun project.

    :param args: Arguments namespace.
    :type args: argparse.Namespace
    """
    args = vars(args)
    new_models = args["add"]
    config_path = args["config"]

    if not exists(config_path):
        logger.error(f"Can't find '{config_path}', initialize this project first.")
        exit(1)

    model_config_map = {
        "wrf": CONFIG_WRF_TOML_TEMPLATE
    }

    for _new_model in new_models:
        if _new_model not in model_config_map:
            logger.error(f"Unknow model type: '{_new_model}'")
            exit(1)

    config_dir_path = f"{abspath(dirname(config_path))}/configs"

    if not exists(config_dir_path):
        makedirs(config_dir_path)

    with open(config_path, "rb") as f:
        main_config = tomli.load(f)

    for _new_model in new_models:
        if _new_model not in main_config["model"]:
            main_config["model"][_new_model] = {
                "note": "Config of this model is generated by wrfrun cli command. DO NOT ADD CUSTOM CONFIG IN THIS SECTION because they may be overwrite by wrfrun cli tools.",
                "use": True,
                "include": f"./configs/{_new_model}.toml"
            }

        else:
            if not ("use" in main_config["model"] and main_config["model"]["use"]):
                main_config["model"][_new_model] = {
                    "note": "Config of this model is generated by wrfrun cli command. DO NOT ADD CUSTOM CONFIG IN THIS SECTION because they may be overwrite by wrfrun cli tools.",
                    "use": True,
                    "include": f"./configs/{_new_model}.toml"
                }

    for _new_model in new_models:
        copyfile(WRFRUNConfig.parse_resource_uri(model_config_map[_new_model]), f"{config_dir_path}/{_new_model}.toml")

    with open(config_path, "wb") as f:
        tomli_w.dump(main_config, f)

    logger.info(f"Added models: {new_models}")


def main_entry():
    """
    CLI entry point.
    """

    args_parser = argparse.ArgumentParser()
    subparsers = args_parser.add_subparsers(title="Subcommands", description="Valid Subcommands", help="Subcommands")

    init_parser = subparsers.add_parser("init", help="Initialize a wrfrun project.", add_help=True)
    init_parser.add_argument("-n", "--name", type=str, required=True, help="Name of the wrfrun project.")
    init_parser.add_argument("--models", nargs="*", type=str, help="List of models to use.", choices=["wrf"])
    init_parser.set_defaults(func=_entry_init)

    model_parser = subparsers.add_parser("model", help="Manage models used by wrfrun project.", add_help=True)
    model_parser.add_argument("-c", "--config", type=str, default="config.toml", help="Path of the main config file.")
    model_parser.add_argument("-a", "--add", nargs="+", required=True, type=str, help="Add models to the project.")
    model_parser.set_defaults(func=_entry_model)

    args = args_parser.parse_args(args=None if sys.argv[1:] else ["--help"])
    args.func(args)


__all__ = ["main_entry"]
